1. ps (Processes)
  ps 
    to see a list of running processes
      PID TTY          TIME CMD
      1796 pts/0    00:00:00 zsh
      1832 pts/0    00:00:00 ps
        PID => Process ID
        TTY => Controlling terminal associated with the process
        STAT => Process status code
        TIME => Total CPU usage time
        CMD => Name of executable/command
  ps aux
    a => displays all processes running, including the ones being ran by other users.
    u => shows more details about the processes
    x => lists all processes that don't have a TTY associated with it
      USER: The effective user (the one whose access we are using)
      PID : Process ID
      %CPU: CPU time used divided by the time the process has been running
      %MEM: Ratio of the process's resident set size to the physical memory on the machine
      VSZ: Virtual memory usage of the entire process
      RSS: Resident set size, the non-swapped physical memory that a task has used
      TTY: Controlling terminal associated with the process
      STAT: Process status code
      START: Start time of the process
      TIME: Total CPU usage time
      COMMAND: Name of executable/command
  top
    gives you real time information about the processes running on your system instead of a snapshot.
    By default you'll get a refresh every 10 seconds.

2. Controlling Terminal
  tty => tty is the terminal that executes the command.
  regular terminal device
      a native terminal device that you can type into and send output to your system
      Not a regular terminal application
  pseudoterminal device
      They emulate terminals with the shell terminal window and are denoted by PTS
      If you look at ps again, you'll see your shell process under pts/*.

3. Process Details
  A process is an instance of a running program, go ahead and open 3 terminal windows, in two windows, run the cat command without passing any options (the cat command process will stay open as a process becasue it expects stdin.)
  Now in the thirts window run: ps aux | grep cat. You'll see that there are two processes for cat, even though they are calling the same program.

4. Process Creation
  fork system call creates a new process
  ps l => detailed view of running processes

  F   UID     PID    PPID PRI  NI    VSZ   RSS WCHAN  STAT TTY        TIME COMMAND
  4  1000   18668     743  20   0  10152  5980 wait_w S+   tty1       0:00 -zsh
  0  1000   44584   44581  20   0  10372  6612 sigsus Ss   pts/0      0:00 /usr/bin/zsh
  0  1000   45969   44584  20   0  11268  4352 -      R+   pts/0      0:00 ps l
      Now look above, you'll see a process running that is the shell, on on my system I have a process running zsh.
      Now remember when the ps l command is ran, it was running from the process that was running zsh.
      Now you'll see that the PID of the zsh shell is the PPID of the ps l command.

5. Process Termination
  Most common termination status for a process succeeding is a 0.
  _exit system call
  wait system call
    The parent process has to acknowledge the termination of the child process 
  Orphan Processes
    When a parent proccess dies before a child process, it becomes orphan and kernel puts it under the care of init.
  Zombie Processes
    When a child terminates before the parent calls wait system call

6. Signals
  A signal is a notification to a process that something has happened.
  SIGHUP or HUP or 1: Hangup
  SIGINT or INT or 2: Interrupt
  SIGKILL or KILL or 9: Kill
    SIGKILL is unblockable. The KILL signal destroys the process.
  SIGSEGV or SEGV or 11: Segmentation fault
  SIGTERM or TERM or 15: Software termination
  SIGSTOP or STOP : Stop

7. kill (Terminate)
  kill 12445
  kill <process ID>
  By default TERM signal is sent.
  SIGTERM is sent to a process to request its termination
  kill -9 12445
    This will run the SIGKILL signal and kill the process.
  SIGHUP
    Hangup, sent to a process when a controlling terminal is closed.
    For example, if you closed a terminal window that had a process running in it,
    you would get a SIGHUP signal. So basically you've been hung up on.
  SIGINT
    Is an interrupt signal, so you can use Ctrl-C and the system will try to gracefully kill the process
  SIGTERM
    Kill the process, but allow it to do some cleanup first
  SIGKILL
    Kill the process, kill it with fire, doesn't do any cleanup
  SIGSTOP
    Stop/suspend a process

8. niceness
  Processes have a number to determine their priority for the CPU.
  A high number means the process is nice and has a lower priority for the CPU
  A low or negative number means the process is not very nice and it wants to get as much of the CPU as possible.
top
  NI => niceness level of a process
  To change the niceness level
    nice -n 5 apt upgrade
      The nice command is used to set priority for a new process.
    renice 10 -p 3245
      The renice command is used to set priority on an existing process.

9. Process States
  ps aux
  In the STAT column,
    R: running or runnable, it is just waiting for the CPU to process it
    S: Interruptible sleep, waiting for an event to complete, such as input from the terminal
    D: Uninterruptible sleep, processes that cannot be killed or interrupted with a signal, usually to make them go away you have to reboot or fix the issue
    Z: Zombie, terminated processes that are waiting to have their statuses collected
    T: Stopped, a process that has been suspended/stopped

10. /proc filesystem
  special filesystem to store process information
  ls /proc
  cat /proc/166/status

11. Job Control
  Sending a job to the background
    Appending an ampersand will run in it the background
      sleep 1000 &
    View all background jobs
      jobs
    + => most recent job
    - => the seconf most recent job
  Sending a job to the background on existing job
    1. Ctrl-Z => to suspend the job
    2. bg => to send it to the background
  Moving a job from the background to the foreground
    If you run fg without any options, it will bring back the most recent background job
    fg %1
  Kill background jobs
    kill %1

  



  


      

  
  
